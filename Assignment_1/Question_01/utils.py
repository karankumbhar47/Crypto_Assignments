SBOX = {
    0: 0, 1: 90, 2: 88, 3: 3, 4: 15, 5: 26, 6: 120, 7: 27, 8: 118, 9: 31, 10: 61, 11: 25, 12: 85, 13: 28, 14: 42, 15: 75,
    16: 105, 17: 82, 18: 37, 19: 94, 20: 83, 21: 52, 22: 102, 23: 73, 24: 53, 25: 69, 26: 20, 27: 17, 28: 101, 29: 13, 30: 2, 31: 41,
    32: 1, 33: 97, 34: 66, 35: 58, 36: 38, 37: 103, 38: 6, 39: 112, 40: 50, 41: 99, 42: 93, 43: 32, 44: 77, 45: 39, 46: 24, 47: 67,
    48: 40, 49: 114, 50: 95, 51: 4, 52: 96, 53: 115, 54: 117, 55: 22, 56: 21, 57: 71, 58: 125, 59: 16, 60: 100, 61: 86, 62: 46, 63: 7,
    64: 18, 65: 35, 66: 78, 67: 89, 68: 30, 69: 51, 70: 68, 71: 5, 72: 9, 73: 92, 74: 57, 75: 122, 76: 11, 77: 49, 78: 98, 79: 110,
    80: 79, 81: 124, 82: 65, 83: 44, 84: 59, 85: 54, 86: 87, 87: 126, 88: 80, 89: 29, 90: 10, 91: 23, 92: 123, 93: 81, 94: 113, 95: 107,
    96: 127, 97: 8, 98: 60, 99: 74, 100: 63, 101: 72, 102: 121, 103: 55, 104: 56, 105: 43, 106: 62, 107: 108, 108: 12, 109: 104, 110: 84, 111: 64,
    112: 119, 113: 116, 114: 111, 115: 48, 116: 76, 117: 106, 118: 70, 119: 47, 120: 109, 121: 19, 122: 36, 123: 45, 124: 34, 125: 14, 126: 91, 127: 33
}

reversed_SBOX = {
    0: 0, 1: 32, 2: 30, 3: 3, 4: 51, 5: 71, 6: 38, 7: 63, 8: 97, 9: 72, 10: 90, 11: 76, 12: 108, 13: 29, 14: 125, 15: 4,
    16: 59, 17: 27, 18: 64, 19: 121, 20: 26, 21: 56, 22: 55, 23: 91, 24: 46, 25: 11, 26: 5, 27: 7, 28: 13, 29: 89, 30: 68, 31: 9,
    32: 43, 33: 127, 34: 124, 35: 65, 36: 122, 37: 18, 38: 36, 39: 45, 40: 48, 41: 31, 42: 14, 43: 105, 44: 83, 45: 123, 46: 62, 47: 119,
    48: 115, 49: 77, 50: 40, 51: 69, 52: 21, 53: 24, 54: 85, 55: 103, 56: 104, 57: 74, 58: 35, 59: 84, 60: 98, 61: 10, 62: 106, 63: 100,
    64: 111, 65: 82, 66: 34, 67: 47, 68: 70, 69: 25, 70: 118, 71: 57, 72: 101, 73: 23, 74: 99, 75: 15, 76: 116, 77: 44, 78: 66, 79: 80,
    80: 88, 81: 93, 82: 17, 83: 20, 84: 110, 85: 12, 86: 61, 87: 86, 88: 2, 89: 67, 90: 1, 91: 126, 92: 73, 93: 42, 94: 19, 95: 50,
    96: 52, 97: 33, 98: 78, 99: 41, 100: 60, 101: 28, 102: 22, 103: 37, 104: 109, 105: 16, 106: 117, 107: 95, 108: 107, 109: 120, 110: 79, 111: 114,
    112: 39, 113: 94, 114: 49, 115: 53, 116: 113, 117: 54, 118: 8, 119: 112, 120: 6, 121: 102, 122: 75, 123: 92, 124: 81, 125: 58, 126: 87, 127: 96
}


def tryAllKey(m,target):
    global SBOX
    keys = []

    for i in range(128):
        for j in range(128):
            for k in range(128):
                u = m^i
                v = SBOX[u] 
                
                w = v^j
                x = SBOX[w]

                c = x^k
                if c == target:
                    keys.append([i, j, k])
    return keys


def getKey(pair,keys):
    global SBOX
    key1= keys 
    key2= []
    index = 0

    while(len(key1)>1 and index<len(pair)):
        m,target = pair[index]
        for key in key1:
            i, j, k = key[0],key[1],key[2]
            u = m^i
            v = SBOX[u] 

            w = v^j
            x = SBOX[w]

            c = x^k
            if c == target:
                key2.append([i,j,k])
        key1 = key2
        key2 = []
        index+=1
    return key1


def decrypt(c,keys):
    global reversed_SBOX
    x = c^keys[2]
    w = reversed_SBOX[x] 
                 
    v = w^keys[1]
    u = reversed_SBOX[v]

    m = u^keys[0]
    return chr(m)


def encrypt(m,keys):
    u = m^keys[0]
    v = SBOX[u] 
                 
    w = v^keys[1]
    x = SBOX[w]

    c = x^keys[2]
    return chr(c)


def getLink(cipherText,keys):
    link = ""
    index = 0
    endMessage = "sharing"

    while(True):
        link += decrypt(cipherText[index],keys)
        index += 1

        if(len(link)>8 and link[-7:]==endMessage):
            break
    return link
